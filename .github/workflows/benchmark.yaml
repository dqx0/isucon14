name: Benchmark Test

on:
  push:
    branches: [ main, dev ]

jobs:
  benchmark:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      - name: Install dependencies
        run: |
            sudo apt-get update
            sudo apt-get install -y mysql-server

            # MySQLサービスを開始
            sudo systemctl start mysql

            echo "127.0.0.1 isuride.xiv.isucon.net" | sudo tee -a /etc/hosts

            MYSQL_DEBIAN_USERNAME=$(sudo grep -P '^user\s*=' /etc/mysql/debian.cnf | head -1 | awk '{print $3}')
            MYSQL_DEBIAN_PASSWORD=$(sudo grep -P '^password\s*=' /etc/mysql/debian.cnf | head -1 | awk '{print $3}')

            mysql -u $MYSQL_DEBIAN_USERNAME -p$MYSQL_DEBIAN_PASSWORD -e "CREATE DATABASE IF NOT EXISTS isuride;"
            mysql -u $MYSQL_DEBIAN_USERNAME -p$MYSQL_DEBIAN_PASSWORD -e "CREATE USER IF NOT EXISTS 'isucon'@'localhost' IDENTIFIED BY 'isucon';"
            mysql -u $MYSQL_DEBIAN_USERNAME -p$MYSQL_DEBIAN_PASSWORD -e "GRANT ALL PRIVILEGES ON isuride.* TO 'isucon'@'localhost';"
            mysql -u $MYSQL_DEBIAN_USERNAME -p$MYSQL_DEBIAN_PASSWORD -e "FLUSH PRIVILEGES;"
            
            # 接続テスト
            mysql -u isucon -pisucon -e "SELECT 1;" || echo "MySQL connection test failed"
      
      - name: Initialize database
        run: |
          # データベース初期化スクリプトがある場合
          if [ -f webapp/sql/init.sql ]; then
            mysql -u isucon -pisucon isuride < webapp/sql/init.sql
          fi
          if [ -f webapp/sql/0_Schema.sql ]; then
            mysql -u isucon -pisucon isuride < webapp/sql/0_Schema.sql
          fi
          if [ -f webapp/sql/1_DummyUserData.sql ]; then
            mysql -u isucon -pisucon isuride < webapp/sql/1_DummyUserData.sql
          fi
      
      - name: Setup static files
        run: |
          # 静的ファイルが存在するかチェック
          if [ -d webapp/public ]; then
            echo "Static files found in webapp/public"
            ls -la webapp/public/
          fi
          if [ -d webapp/frontend ]; then
            echo "Frontend files found in webapp/frontend"
            ls -la webapp/frontend/
          fi
          if [ -d webapp/static ]; then
            echo "Static files found in webapp/static"
            ls -la webapp/static/
          fi
          
          # nginx設定がある場合は確認
          if [ -f webapp/nginx.conf ]; then
            echo "nginx.conf found"
            cat webapp/nginx.conf
          fi
          
      - name: Start payment service
        run: |
          # 支払いサービスを起動
          if [ -f webapp/go/cmd/payment/main.go ]; then
            cd webapp/go
            nohup go run ./cmd/payment/main.go > payment.log 2>&1 &
            echo $! > payment.pid
            sleep 5
          elif [ -f webapp/payment/main.go ]; then
            cd webapp/payment
            nohup go run ./main.go > payment.log 2>&1 &
            echo $! > payment.pid
            sleep 5
          else
            echo "Payment service not found, creating mock service"
            cat > mock_payment.py << 'EOF'
          import http.server
          import socketserver
          from urllib.parse import urlparse, parse_qs
          import json
          
          class PaymentHandler(http.server.BaseHTTPRequestHandler):
              def do_POST(self):
                  self.send_response(200)
                  self.send_header('Content-type', 'application/json')
                  self.end_headers()
                  self.wfile.write(json.dumps({'status': 'success'}).encode())
              
              def log_message(self, format, *args):
                  pass
          
          with socketserver.TCPServer(('', 12346), PaymentHandler) as httpd:
              httpd.serve_forever()
          EOF
            nohup python3 mock_payment.py > payment.log 2>&1 &
            echo $! > payment.pid
            sleep 5
          fi
        env:
          ISUCON_PAYMENT_URL: http://localhost:12346
          ISUCON_PAYMENT_BIND_PORT: 12346

      - name: Start Go server
        run: |
          cd webapp/go
          go mod download
          echo "Starting server with env vars:"
          env | grep ISUCON || true
          nohup go run ./... > server.log 2>&1 &
          echo $! > server.pid
          sleep 15
          
          # サーバーが起動したか確認
          echo "=== Server Status ==="
          ps aux | grep -E "(go|main)" | grep -v grep || echo "Go process not found"
          echo "=== Network Status ==="
          netstat -tlnp | grep :8080 || echo "Port 8080 not listening"
          echo "=== Server Log (first 20 lines) ==="
          head -20 server.log || echo "No server log found"
        env:
          ISUCON_DB_HOST: localhost
          ISUCON_DB_PORT: 3306
          ISUCON_DB_USER: isucon
          ISUCON_DB_PASSWORD: isucon
          ISUCON_DB_NAME: isuride
          ISUCON_PAYMENT_URL: http://localhost:12346
          ISUCON_PAYMENT_BIND_PORT: 12346

      - name: Initialize application
        run: |
          # 初期化APIを呼び出し
          curl -X POST http://localhost:8080/api/initialize || echo "Initialize failed"
        env:
          ISUCON_DB_HOST: localhost
          ISUCON_DB_PORT: 3306
          ISUCON_DB_USER: isucon
          ISUCON_DB_PASSWORD: isucon
          ISUCON_DB_NAME: isuride
          ISUCON_PAYMENT_URL: http://localhost:12346
          ISUCON_PAYMENT_BIND_PORT: 12346

      - name: Start matching trigger
        run: |
          nohup bash -c 'while true; do curl -s http://localhost:8080/api/internal/matching; sleep 3; done' > matching.log 2>&1 &
          echo $! > matching.pid      
      - name: Run benchmark
        run: |
          ./bench run . run --addr 127.0.0.1:8080 --target http://isuride.xiv.isucon.net --payment-url http://localhost:12346 --payment-bind-port 12346
      
      - name: Cleanup
        if: always()
        run: |
          if [ -f webapp/go/server.pid ]; then
            kill $(cat webapp/go/server.pid) || true
          fi
          if [ -f matching.pid ]; then
            kill $(cat matching.pid) || true
          fi
          if [ -f payment.pid ]; then
            kill $(cat payment.pid) || true
          fi
          echo "=== Server Log ==="
          cat webapp/go/server.log || true
          echo "=== Matching Log ==="
          cat matching.log || true
          echo "=== Payment Log ==="
          cat payment.log || true
